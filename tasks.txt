- naskenovat si BLE od Raspberry v AS
	-scan zařízení
		-udělat permissions v manifest file
	-filtr mého ROS -> zjistit UUID
	
- provést komunikaci s Raspberry 


Notes:
Caution: When a user pairs their device with another device using BLE, the data that's communicated between the two devices is accessible to all apps on the user's device.

For this reason, if your app captures sensitive data, you should implement app-layer security to protect the privacy of that data. Zdroj: https://developer.android.com/guide/topics/connectivity/bluetooth/ble-overview

Bluetooth always transmitting. BLE only when there are some data to transmit. https://www.youtube.com/watch?v=zeN88yh7YdY&ab_channel=CrossComm%2CInc.

maybe: udělat prezentaci Pítrovi

Otázky na Dzurendu: 	obrázky: vidím na videu -> mám si udělat vlastní, nebo vzít z videa a ocitovat?
			proč user posílá HATu, když by mu ho mohl poslat IdP?
			__________________________________________________________________________________
			v tab. vs v Tabulce ??
			vadí používání jednoho zdroje na více místech?
			u zkratek stačí záznam v seznamu zkratek?
			kolik stran se ode mne očekává?
			technické psaní
			

Unless the BluetoothDevice handle was cached from a recent scan, we need to perform a BLE scan before we can connect to a BLE device. A typical BLE app connection setup flow looks like this:

    Perform BLE scan with optional scan results filtering.
    Obtain ScanResult object.
    Call ScanResult object’s getDevice() method to obtain BluetoothDevice object.
    Call BluetoothDevice object’s connectGatt() method to initiate a BLE connection. https://punchthrough.com/android-ble-guide/?fbclid=IwAR1l6ywO1pG0KFLHoc-yzv2b6h9KTDYa8pYr_2j9_O8TMU0BFDDkWm8jcw4
    
    použít SCAN_MODE_LOW_LATENCY -  is recommended if the app will only be scanning for a brief period of time, typically to find a very specific type of device.
